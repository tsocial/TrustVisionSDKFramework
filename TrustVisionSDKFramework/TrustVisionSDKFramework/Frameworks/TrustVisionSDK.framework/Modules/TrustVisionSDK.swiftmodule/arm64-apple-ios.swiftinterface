// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrustVisionSDK
import AVKit
import CommonCrypto
import CoreGraphics
import CoreLocation
import Foundation
import Swift
import TrustVisionAPI
@_exported import TrustVisionSDK
import UIKit
import Vision
@objc public class SoundPlayer : ObjectiveC.NSObject {
  public var isEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public enum Algorithm {
  case md5, sha1, sha224, sha256, sha384, sha512
  public var digestLength: Swift.Int {
    get
  }
  public static func == (a: TrustVisionSDK.Algorithm, b: TrustVisionSDK.Algorithm) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol Hashable {
  associatedtype Hash
  func digest(_ algorithm: TrustVisionSDK.Algorithm, key: Swift.String?) -> Self.Hash
  var md5: Self.Hash { get }
  var sha1: Self.Hash { get }
  var sha224: Self.Hash { get }
  var sha256: Self.Hash { get }
  var sha384: Self.Hash { get }
  var sha512: Self.Hash { get }
}
extension Hashable {
  public var md5: Self.Hash {
    get
  }
  public var sha1: Self.Hash {
    get
  }
  public var sha224: Self.Hash {
    get
  }
  public var sha256: Self.Hash {
    get
  }
  public var sha384: Self.Hash {
    get
  }
  public var sha512: Self.Hash {
    get
  }
}
extension String : TrustVisionSDK.Hashable {
  public func digest(_ algorithm: TrustVisionSDK.Algorithm) -> Swift.String
  public func digest(_ algorithm: TrustVisionSDK.Algorithm, key: Swift.String?) -> Swift.String
  public func digest(_ algorithm: TrustVisionSDK.Algorithm, key: Foundation.Data?) -> Swift.String
  public typealias Hash = Swift.String
}
extension Data : TrustVisionSDK.Hashable {
  public func digest(_ algorithm: TrustVisionSDK.Algorithm) -> Foundation.Data
  public func digest(_ algorithm: TrustVisionSDK.Algorithm, key: Swift.String?) -> Foundation.Data
  public func digest(_ algorithm: TrustVisionSDK.Algorithm, key: Foundation.Data?) -> Foundation.Data
  public typealias Hash = Foundation.Data
}
@objc public class TrustVisionSdk : ObjectiveC.NSObject, TrustVisionSDK.TrustVisionSdkProtocol {
  @objc public static func initialize(localizationFiles: [TrustVisionSDK.TVLocalizationFile]?, isForced: Swift.Bool, success: @escaping () -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  @objc public static func initialize(accessKeyId: Swift.String, accessKeySecret: Swift.String, localizationFiles: [TrustVisionSDK.TVLocalizationFile]?, isForced: Swift.Bool, success: @escaping () -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  @objc public static func newCameraViewController(config: TrustVisionSDK.TVSDKConfig, success: @escaping (TrustVisionSDK.TVDetectionResult) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void, cancellation: @escaping () -> Swift.Void) -> UIKit.UINavigationController
  @objc public static func getCardTypes() -> [TrustVisionSDK.TVCardType]
  @objc public static func getLivenessOptions() -> [Swift.String]
  @objc public static func getSelfieCameraMode() -> TrustVisionAPI.TVCameraOption
  @objc public static func getIdCardSanityCheckingEnable() -> Swift.Bool
  @objc public static func getSelfieSanityCheckingEnable() -> Swift.Bool
  @objc public static func getSupportTransaction() -> Swift.Bool
  @objc public static func startTransaction(referenceId: Swift.String?, success: @escaping (Swift.String?) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  @objc public static func endTransaction(success: @escaping () -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  @objc public static func startIdCapturing(configuration: TrustVisionSDK.TVIdCardConfiguration, success: @escaping (TrustVisionSDK.TVDetectionResult) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void, cancellation: @escaping () -> Swift.Void) -> UIKit.UINavigationController
  @objc public static func startSelfieCapturing(configuration: TrustVisionSDK.TVSelfieConfiguration, success: @escaping (TrustVisionSDK.TVDetectionResult) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void, cancellation: @escaping () -> Swift.Void) -> UIKit.UINavigationController
  @objc public static func matchFace(image1Id: Swift.String, image2Id: Swift.String, success: @escaping (TrustVisionSDK.TVCompareFacesResult) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  @objc public static func downloadImage(imageId: Swift.String, success: @escaping (UIKit.UIImage?) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public enum TVSdkEnvironment {
  case testing
  case staging
  case production
  public static func == (a: TrustVisionSDK.TVSdkEnvironment, b: TrustVisionSDK.TVSdkEnvironment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public class TVLocalizationFile : ObjectiveC.NSObject {
  @objc public init(languageCode: Swift.String, contentData: Foundation.Data?)
  @objc override dynamic public init()
  @objc deinit
}
public typealias VerifyFaceSDKBlock = (TrustVisionSDK.TVDetectionResult?, TrustVisionSDK.TVError?) -> Swift.Void
public protocol TrustVisionSdkProtocol {
  static func initialize(localizationFiles: [TrustVisionSDK.TVLocalizationFile]?, isForced: Swift.Bool, success: @escaping () -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  static func initialize(accessKeyId: Swift.String, accessKeySecret: Swift.String, localizationFiles: [TrustVisionSDK.TVLocalizationFile]?, isForced: Swift.Bool, success: @escaping () -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  static func newCameraViewController(config: TrustVisionSDK.TVSDKConfig, success: @escaping (TrustVisionSDK.TVDetectionResult) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void, cancellation: @escaping () -> Swift.Void) -> UIKit.UINavigationController
  static func getCardTypes() -> [TrustVisionSDK.TVCardType]
  static func getSelfieCameraMode() -> TrustVisionAPI.TVCameraOption
  static func getLivenessOptions() -> [Swift.String]
  static func getIdCardSanityCheckingEnable() -> Swift.Bool
  static func getSelfieSanityCheckingEnable() -> Swift.Bool
  static func startTransaction(referenceId: Swift.String?, success: @escaping (Swift.String?) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  static func endTransaction(success: @escaping () -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  static func startIdCapturing(configuration: TrustVisionSDK.TVIdCardConfiguration, success: @escaping (TrustVisionSDK.TVDetectionResult) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void, cancellation: @escaping () -> Swift.Void) -> UIKit.UINavigationController
  static func startSelfieCapturing(configuration: TrustVisionSDK.TVSelfieConfiguration, success: @escaping (TrustVisionSDK.TVDetectionResult) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void, cancellation: @escaping () -> Swift.Void) -> UIKit.UINavigationController
  static func matchFace(image1Id: Swift.String, image2Id: Swift.String, success: @escaping (TrustVisionSDK.TVCompareFacesResult) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
  static func downloadImage(imageId: Swift.String, success: @escaping (UIKit.UIImage?) -> Swift.Void, failure: @escaping (TrustVisionSDK.TVError) -> Swift.Void)
}
extension Collection {
  public subscript(atIndex i: Self.Index) -> Self.Iterator.Element? {
    get
  }
}
extension UIView {
  public func applyGradient(colours: [UIKit.UIColor])
  public func applyGradient(colours: [UIKit.UIColor], locations: [Foundation.NSNumber]?)
}
@objc public class TVViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TVViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
@objc public class TVBaseDetectionViewController : TrustVisionSDK.TVViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class TVCameraPreview : UIKit.UIView {
  public init(frame: CoreGraphics.CGRect, videoGravity: AVFoundation.AVLayerVideoGravity)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public enum TVCameraState : Swift.String {
  case initialing
  case start
  case capturing
  case stop
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class TVCardInfoResult : TrustVisionSDK.TVBasePollingResult, Swift.Encodable {
  @objc public class CardInfo : ObjectiveC.NSObject, Swift.Encodable {
    @objc public var field: Swift.String?
    @objc public var value: Swift.String?
    @objc public init(field: Swift.String?, value: Swift.String?)
    @objc override dynamic public init()
    @objc deinit
    public func encode(to encoder: Swift.Encoder) throws
  }
  @objc public var infos: [TrustVisionSDK.TVCardInfoResult.CardInfo]
  @objc public var croppedImage1Id: Swift.String?
  @objc public var croppedImage2Id: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  @objc public init(requestId: Swift.String?, infos: [TrustVisionSDK.TVCardInfoResult.CardInfo], croppedImage1Id: Swift.String?, croppedImage2Id: Swift.String?)
  @objc public static func fromApiObject(cardInfoResponse: TrustVisionAPI.TVCardInfoResponse?) -> TrustVisionSDK.TVCardInfoResult?
  override public init(requestId: Swift.String?)
  @objc deinit
}
@objc public class TVCompareFacesResult : TrustVisionSDK.TVBasePollingResult, Swift.Encodable {
  @objc public enum MatchResult : Swift.Int, Swift.CustomStringConvertible {
    case matched
    case unmatched
    case unsure
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var score: Swift.Float
  @objc public var matchResult: TrustVisionSDK.TVCompareFacesResult.MatchResult
  public static func fromApiObject(conpareFacesResponse: TrustVisionAPI.TVCompareFacesResponse?) -> TrustVisionSDK.TVCompareFacesResult?
  public func encode(to encoder: Swift.Encoder) throws
  @objc public func toDictionary() -> [Swift.String : Any]?
  override public init(requestId: Swift.String?)
  @objc deinit
}
@objc public class TVDetectIdCardTamperingResult : TrustVisionSDK.TVBasePollingResult, Swift.Encodable {
  @objc public var isGood: Swift.Bool
  @objc public var score: Swift.Float
  @objc public var error: TrustVisionSDK.TVError?
  @objc public init?(idCardTampering: TrustVisionAPI.TVIdCardTampering?, requestId: Swift.String?)
  override public init(requestId: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class TVDetectionResult : ObjectiveC.NSObject, Swift.Encodable {
  @objc public var config: TrustVisionSDK.TVSDKConfig?
  @objc public var cardType: TrustVisionSDK.TVCardType?
  @objc public var actionMode: TrustVisionSDK.TVSDKConfig.ActionMode
  @objc public var compareImageResult: TrustVisionSDK.TVCompareFacesResult?
  @objc public var cardInfoResult: TrustVisionSDK.TVCardInfoResult?
  @objc public var livenessResult: TrustVisionSDK.TVLivenessResult?
  @objc public var idSanityResult: TrustVisionSDK.TVSanityResult?
  @objc public var selfieSanityResult: TrustVisionSDK.TVSanityResult?
  @objc public var idCardTamperingResult: TrustVisionSDK.TVDetectIdCardTamperingResult?
  @objc public var selfieImage: UIKit.UIImage?
  @objc public var frontIdImage: UIKit.UIImage?
  @objc public var backIdImage: UIKit.UIImage?
  @objc public var selfieImageId: Swift.String?
  @objc public var frontIdImageId: Swift.String?
  @objc public var backIdImageId: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  @objc public func toDictionary() -> [Swift.String : Any]?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TVBasePollingResult : ObjectiveC.NSObject {
  public var requestId: Swift.String?
  public init(requestId: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
public enum CompareImageResult {
  case notMatched
  case matched(confidence: Swift.Int)
}
public class TVImageClass {
  @objc deinit
}
public class TVCardSideImage {
  @objc deinit
}
public class TVLivenessImage : TrustVisionSDK.TVImageClass {
  @objc deinit
}
@objc public enum TVErrorCategory : Swift.Int {
  case server
  case local
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class TVError : ObjectiveC.NSObject, Swift.Encodable {
  @objc public var category: TrustVisionSDK.TVErrorCategory {
    get
    }
  @objc public var errorCode: Swift.String {
    get
    }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public static func sdkNotIntializedError() -> TrustVisionSDK.TVError
  @objc override dynamic public init()
  @objc deinit
}
public class TVProgressView {
  public func showProgressView()
  public func hideProgressView()
  @objc deinit
}
@objc public class TVIdCardConfiguration : ObjectiveC.NSObject, Swift.Decodable {
  @objc public enum TVCardSide : Swift.Int, Swift.Decodable, Swift.CustomStringConvertible {
    case front = 0
    case back = 1
    public static func fromString(stringValue: Swift.String) -> TrustVisionSDK.TVIdCardConfiguration.TVCardSide?
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var cardType: TrustVisionSDK.TVCardType!
  @objc public var cardSide: TrustVisionSDK.TVIdCardConfiguration.TVCardSide
  @objc public var isSoundEnable: Swift.Bool
  @objc public var isSanityRequired: Swift.Bool
  @objc public var isReadBothSide: Swift.Bool
  @objc public var isIdCardTamperingDetectionEnable: Swift.Bool
  required public init(from decoder: Swift.Decoder) throws
  @objc public init(cardType: TrustVisionSDK.TVCardType, cardSide: TrustVisionSDK.TVIdCardConfiguration.TVCardSide, isSoundEnable: Swift.Bool, isSanityRequired: Swift.Bool, isReadBothSide: Swift.Bool, isIdCardTamperingDetectionEnable: Swift.Bool)
  @objc public static func dictToObj(dict: Foundation.NSDictionary) -> TrustVisionSDK.TVIdCardConfiguration?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TVIDDetectionViewController : TrustVisionSDK.TVBaseDetectionViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TVIDDetectionViewController : UIKit.UINavigationControllerDelegate, UIKit.UIImagePickerControllerDelegate {
  @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
@objc public class TVLivenessDetectionViewController : TrustVisionSDK.TVBaseDetectionViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class TVLivenessResult : TrustVisionSDK.TVBasePollingResult, Swift.Encodable {
  @objc public var score: Swift.Float
  @objc public var isLive: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  @objc public static func fromApiObject(apiLivenessResponse: TrustVisionAPI.TVVerifyLivenessResponse?) -> TrustVisionSDK.TVLivenessResult?
  override public init(requestId: Swift.String?)
  @objc deinit
}
@objc public class TVQRScannerViewController : TrustVisionSDK.TVBaseDetectionViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class TVResultViewController : UIKit.UIViewController {
  public var result: TrustVisionSDK.TVDetectionResult?
  @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TVResultViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc public class TVSanityResult : TrustVisionSDK.TVBasePollingResult, Swift.Encodable {
  @objc public var isGood: Swift.Bool
  @objc public var score: Swift.Float
  @objc public var error: TrustVisionSDK.TVError?
  public func encode(to encoder: Swift.Encoder) throws
  @objc public init?(sanity: TrustVisionAPI.TVSanity?, requestId: Swift.String?)
  override public init(requestId: Swift.String?)
  @objc deinit
}
@objc public class TVQrSdk : ObjectiveC.NSObject, Swift.Decodable, Swift.Encodable {
  @objc public var exist: Swift.Bool
  @objc public var type: TrustVisionAPI.TVQRType
  @objc public var widthHeightRatio: Swift.Float
  @objc public init(exist: Swift.Bool, type: TrustVisionAPI.TVQRType, widthHeightRatio: Swift.Float)
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TVCardType : ObjectiveC.NSObject, Swift.Decodable, Swift.Encodable {
  @objc public enum CardOrientation : Swift.Int, Swift.CustomStringConvertible, Swift.Encodable {
    case landscape = 0
    case portrait = 1
    public static func fromString(inputString: Swift.String) -> TrustVisionSDK.TVCardType.CardOrientation?
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var id: Swift.String
  @objc public var name: Swift.String
  @objc public var orientation: TrustVisionSDK.TVCardType.CardOrientation
  @objc public var hasBackSide: Swift.Bool
  @objc public var frontQr: TrustVisionSDK.TVQrSdk
  @objc public var backQr: TrustVisionSDK.TVQrSdk
  @objc public init(id: Swift.String, name: Swift.String, orientation: TrustVisionSDK.TVCardType.CardOrientation, hasBackSide: Swift.Bool, frontQr: TrustVisionSDK.TVQrSdk, backQr: TrustVisionSDK.TVQrSdk)
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc public static func dictToObj(dict: Foundation.NSDictionary) -> TrustVisionSDK.TVCardType?
  @objc public func toDictionary() -> [Swift.String : Any]?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum LivenessOption : Swift.Int, Swift.CustomStringConvertible {
  case active = 0
  case passive = 1
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CameraMode : Swift.Int, Swift.CustomStringConvertible {
  case both = 0
  case front = 1
  case back = 2
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class TVSDKConfig : ObjectiveC.NSObject, Swift.Decodable {
  @objc public enum Step : Swift.Int, Swift.CustomStringConvertible {
    case none = -1
    case id_front = 0
    case id_back = 1
    case qr_front = 2
    case qr_back = 3
    case cardInfo = 4
    case liveness = 5
    case faceMatching = 6
    case cardSanity = 7
    case selfieSanity = 8
    case idCardTampering = 9
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum ActionMode : Swift.Int, Swift.Decodable, Swift.CustomStringConvertible {
    case faceMatching = 0
    case full = 1
    case liveness = 2
    case extractIdInfo = 3
    public var description: Swift.String {
      get
    }
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var actionMode: TrustVisionSDK.TVSDKConfig.ActionMode
  @objc public var cardType: TrustVisionSDK.TVCardType!
  @objc public var livenessMode: TrustVisionAPI.TVLivenessOption
  @objc public var isEnableSound: Swift.Bool
  @objc public var isEnableVerifyMultipleFaces: Swift.Bool
  @objc public var isEnableVerifyPortraitSanity: Swift.Bool
  @objc public var isEnableVerifyIDSanity: Swift.Bool
  @objc public var selfieCameraMode: TrustVisionAPI.TVCameraOption
  @objc public var isEnableDetectingIdCardTampering: Swift.Bool
  required public init(from decoder: Swift.Decoder) throws
  @objc public static func dictToObj(dict: Foundation.NSDictionary) -> TrustVisionSDK.TVSDKConfig?
  @objc public class func defaultConfig() -> TrustVisionSDK.TVSDKConfig
  @objc deinit
}
@objc public class TVSelfieConfiguration : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var cameraOption: TrustVisionAPI.TVCameraOption
  @objc public var isSoundEnable: Swift.Bool
  @objc public var isSanityRequired: Swift.Bool
  @objc public var livenessMode: TrustVisionAPI.TVLivenessOption
  required public init(from decoder: Swift.Decoder) throws
  @objc public init(cameraOption: TrustVisionAPI.TVCameraOption, isSoundEnable: Swift.Bool, isSanityRequired: Swift.Bool, livenessMode: TrustVisionAPI.TVLivenessOption)
  @objc public static func dictToObj(dict: Foundation.NSDictionary) -> TrustVisionSDK.TVSelfieConfiguration?
  @objc override dynamic public init()
  @objc deinit
}
extension UIViewController {
  public func showLoadingHUD()
  public func hideLoadingHUD()
}
extension TrustVisionSDK.Algorithm : Swift.Equatable {}
extension TrustVisionSDK.Algorithm : Swift.Hashable {}
extension TrustVisionSDK.TVSdkEnvironment : Swift.Equatable {}
extension TrustVisionSDK.TVSdkEnvironment : Swift.Hashable {}
extension TrustVisionSDK.TVCameraState : Swift.Equatable {}
extension TrustVisionSDK.TVCameraState : Swift.Hashable {}
extension TrustVisionSDK.TVCameraState : Swift.RawRepresentable {}
extension TrustVisionSDK.TVCompareFacesResult.MatchResult : Swift.Equatable {}
extension TrustVisionSDK.TVCompareFacesResult.MatchResult : Swift.Hashable {}
extension TrustVisionSDK.TVCompareFacesResult.MatchResult : Swift.RawRepresentable {}
extension TrustVisionSDK.TVErrorCategory : Swift.Equatable {}
extension TrustVisionSDK.TVErrorCategory : Swift.Hashable {}
extension TrustVisionSDK.TVErrorCategory : Swift.RawRepresentable {}
extension TrustVisionSDK.TVIdCardConfiguration.TVCardSide : Swift.Hashable {}
extension TrustVisionSDK.TVIdCardConfiguration.TVCardSide : Swift.RawRepresentable {}
extension TrustVisionSDK.TVCardType.CardOrientation : Swift.Hashable {}
extension TrustVisionSDK.TVCardType.CardOrientation : Swift.RawRepresentable {}
extension TrustVisionSDK.LivenessOption : Swift.Equatable {}
extension TrustVisionSDK.LivenessOption : Swift.Hashable {}
extension TrustVisionSDK.LivenessOption : Swift.RawRepresentable {}
extension TrustVisionSDK.CameraMode : Swift.Equatable {}
extension TrustVisionSDK.CameraMode : Swift.Hashable {}
extension TrustVisionSDK.CameraMode : Swift.RawRepresentable {}
extension TrustVisionSDK.TVSDKConfig.Step : Swift.Hashable {}
extension TrustVisionSDK.TVSDKConfig.Step : Swift.RawRepresentable {}
extension TrustVisionSDK.TVSDKConfig.ActionMode : Swift.Equatable {}
extension TrustVisionSDK.TVSDKConfig.ActionMode : Swift.Hashable {}
extension TrustVisionSDK.TVSDKConfig.ActionMode : Swift.RawRepresentable {}
